/**
   MyQueueLinked - linked-list implementation of the MyQueue ADT
*/

public class MyQueueLinked implements MyQueue{
   //define the data container
   MyNode head,tail;
   //define utility attribute
   private int count;
   
   //constructor is not required
   
   //sentinel methods
   public boolean isFull()    {return false;}
   public boolean isEmpty()   {return count == 0;}
   
   //allowable operations
   public boolean enqueue(Object item){
      MyNode node = new MyNode(item);
  
      if(isEmpty())
         head = node;
      else
         tail.setNext(node);    
      
      tail = node;
      count++;
      
      return true;
   }
   
   public Object peek()       {return (!isEmpty())?head.getItem():null;}
   public Object dequeue(){
      Object item = peek();
      
      if(item != null){
         MyNode node = head;
         head = node.getNext();
         node = null;
         count--;
      }
      
      return item;
   }
   //utility methods
   public void clear()  {for(;!isEmpty();dequeue());}
   public int size()    {return count;}
   
   //override the toString() method
   public String toString(){
      StringBuffer sb = new StringBuffer();
      for(MyNode node = head; node != null; node = node.getNext()){
         sb.append(node.getItem());      
      }
      
      return sb.toString();
   }

}
